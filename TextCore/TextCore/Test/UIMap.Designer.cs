// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenSampleText - Use 'OpenSampleTextParams' to pass parameters into this method.
        /// </summary>
        public void OpenSampleText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uILoadButton = this.UIMainWindowWindow.UILoadButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinControl uIOpenDialog = this.UIOpenWindow.UIOpenDialog;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.OpenSampleTextParams.UIMainWindowWindowExePath, this.OpenSampleTextParams.UIMainWindowWindowAlternateExePath);

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(199, 5));

            // Click 'load' button
            Mouse.Click(uILoadButton, new Point(11, 9));

            // Select 'D:\Projects\TextCore\TextCore\Test\Data\SampleText.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenSampleTextParams.UIFilenameComboBoxEditableItem;

            // Click 'Open' Dialog
            Mouse.Click(uIOpenDialog, new Point(232, 465));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(55, 9));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(3, 7));
        }
        
        /// <summary>
        /// ClickAtChar2
        /// </summary>
        public void ClickAtChar2()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(7, 8));
        }
        
        /// <summary>
        /// SelectPickups
        /// </summary>
        public void SelectPickups()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Move 'RenderHost' client from (74, 7) to (132, 8)
            Mouse.StartDragging(uIRenderHostClient, new Point(74, 7));
            Mouse.StopDragging(uIRenderHostClient, 58, 1);
        }
        
        /// <summary>
        /// ClickAtLine5
        /// </summary>
        public void ClickAtLine5()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(58, 75));
        }
        
        /// <summary>
        /// SelectBunchOfLines
        /// </summary>
        public void SelectBunchOfLines()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Move 'RenderHost' client from (74, 70) to (245, 222)
            Mouse.StartDragging(uIRenderHostClient, new Point(74, 70));
            Mouse.StopDragging(uIRenderHostClient, 171, 152);
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uICloseButton = this.UIMainWindowWindow.UIMainWindowTitleBar.UICloseButton;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(202, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 7));
        }
        
        /// <summary>
        /// TypeASentance - Use 'TypeASentanceParams' to pass parameters into this method.
        /// </summary>
        public void TypeASentance()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            WinClient uIRenderHostClient1 = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient1;
            #endregion

            // Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.TypeASentanceParams.UIMainWindowWindowExePath, this.TypeASentanceParams.UIMainWindowWindowAlternateExePath);

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(349, 62));

            // Type 'Save{Space}the{Space}world{Back}{Back}ld.,{Back}{Back}{Space}!{Space}Make{Space}it{Space}a{Space}better{Space}place{Space}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Delete}{Delete}r{Space}{Right}{Right}{Right}{Right}{Right}{Space}for{Space}you{Space}and{Space}for{Space}me{Space}and{Space}the{Space}entire{Space}human{Space}race{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient1, this.TypeASentanceParams.UIRenderHostClient1SendKeys, ModifierKeys.None);

            // Type '{RShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient1, this.TypeASentanceParams.UIRenderHostClient1SendKeys1, ModifierKeys.None);

            // Type '!{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Back}n{Left}{Left}{Left}{Left}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Delete}!' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient1, this.TypeASentanceParams.UIRenderHostClient1SendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// BackspaceAllContent - Use 'BackspaceAllContentParams' to pass parameters into this method.
        /// </summary>
        public void BackspaceAllContent()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            WinClient uIRenderHostClient1 = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient1;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(271, 2));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(174, 26));

            // Type '{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}And{Space}Back{Space}!' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient1, this.BackspaceAllContentParams.UIRenderHostClient1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// TypeAfterLineEnd - Use 'TypeAfterLineEndParams' to pass parameters into this method.
        /// </summary>
        public void TypeAfterLineEnd()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(61, 7));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(15, 8));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(26, 7));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(45, 8));

            // Move 'RenderHost' client from (51, 6) to (59, 6)
            Mouse.StartDragging(uIRenderHostClient, new Point(51, 6));
            Mouse.StopDragging(uIRenderHostClient, 8, 0);

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(100, 8));

            // Type '{Back}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(10, 6));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(49, 12));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(26, 9));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(112, 11));

            // Type '{Space}and{Space}I{Space}am{Space}able{Space}to{Space}type{Space}after{Space}the{Space}end{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys1, ModifierKeys.None);

            // Type '{RShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys2, ModifierKeys.None);

            // Type '!' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys3, ModifierKeys.None);

            // Move 'RenderHost' client from (166, 11) to (265, 12)
            Mouse.StartDragging(uIRenderHostClient, new Point(166, 11));
            Mouse.StopDragging(uIRenderHostClient, 99, 1);

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(427, 17));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(424, 12));

            // Type '{Space}Cool{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys4, ModifierKeys.None);

            // Type '{RShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys5, ModifierKeys.None);

            // Type '!' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeAfterLineEndParams.UIRenderHostClientSendKeys6, ModifierKeys.None);
        }
        
        /// <summary>
        /// LaunchTextCoreDemo - Use 'LaunchTextCoreDemoParams' to pass parameters into this method.
        /// </summary>
        public void LaunchTextCoreDemo()
        {

            // Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
            ApplicationUnderTest textCoreApplication = ApplicationUnderTest.Launch(this.LaunchTextCoreDemoParams.ExePath, this.LaunchTextCoreDemoParams.AlternateExePath);
        }
        
        /// <summary>
        /// OpenSample2XML - Use 'OpenSample2XMLParams' to pass parameters into this method.
        /// </summary>
        public void OpenSample2XML()
        {
            #region Variable Declarations
            WpfButton uILoadButton = this.UIMainWindowWindow.UILoadButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinControl uIOpenDialog = this.UIOpenWindow.UIOpenDialog;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'load' button
            Mouse.Click(uILoadButton, new Point(29, 10));

            // Select 'D:\Projects\TextCore\TextCore\test\data\Sample2.xml' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenSample2XMLParams.UIFilenameComboBoxEditableItem;

            // Click 'Open' Dialog
            Mouse.Click(uIOpenDialog, new Point(232, 465));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(55, 9));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(3, 7));
        }
        
        /// <summary>
        /// AssertVScrollBarExists - Use 'AssertVScrollBarExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertVScrollBarExists()
        {
            #region Variable Declarations
            WpfScrollBar uIVScrollBarScrollBar = this.UIMainWindowWindow.UITextEditorCustom.UIVScrollBarScrollBar;
            #endregion

            // Verify that 'vScrollBar' scroll bar's property 'Enabled' equals 'True'
            Assert.AreEqual(this.AssertVScrollBarExistsExpectedValues.UIVScrollBarScrollBarEnabled, uIVScrollBarScrollBar.Enabled);
        }
        
        /// <summary>
        /// PageDown - Use 'PageDownParams' to pass parameters into this method.
        /// </summary>
        public void PageDown()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(213, 11));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(84, 122));

            // Type '{PageDown}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PageDownParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RightToNextLine - Use 'RightToNextLineParams' to pass parameters into this method.
        /// </summary>
        public void RightToNextLine()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(409, 106));

            // Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RightToNextLineParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// LeftToPreviousLine - Use 'LeftToPreviousLineParams' to pass parameters into this method.
        /// </summary>
        public void LeftToPreviousLine()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(101, 208));

            // Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.LeftToPreviousLineParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// HitHome - Use 'HitHomeParams' to pass parameters into this method.
        /// </summary>
        public void HitHome()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(34, 236));

            // Type '{Home}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.HitHomeParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// HitEnd - Use 'HitEndParams' to pass parameters into this method.
        /// </summary>
        public void HitEnd()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(36, 239));

            // Type '{End}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.HitEndParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// PageUpToTop - Use 'PageUpToTopParams' to pass parameters into this method.
        /// </summary>
        public void PageUpToTop()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            WinClient uIRenderHostClient1 = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient1;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(40, 235));

            // Type '{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient1, this.PageUpToTopParams.UIRenderHostClient1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// PageDownToEnd - Use 'PageDownToEndParams' to pass parameters into this method.
        /// </summary>
        public void PageDownToEnd()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(88, 1));

            // Type '{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PageDownToEndParams.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(97, 239));

            // Type '{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PageDownToEndParams.UIRenderHostClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// CaretDance - Use 'CaretDanceParams' to pass parameters into this method.
        /// </summary>
        public void CaretDance()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(296, 8));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(195, 40));

            // Type '{Right}{Right}{Right}{Right}{Down}{Right}{Right}{Right}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.CaretDanceParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// EditSampleTextAndSave - Use 'EditSampleTextAndSaveParams' to pass parameters into this method.
        /// </summary>
        public void EditSampleTextAndSave()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            WpfButton uISaveButton = this.UIMainWindowWindow.UISaveButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(118, 24));

            // Type '{Space}is{Space}the{Space}best{Space}!{Space}and' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.EditSampleTextAndSaveParams.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Click 'save' button
            Mouse.Click(uISaveButton, new Point(22, 18));

            // Select 'Current\SampleTextSave.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.EditSampleTextAndSaveParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.EditSampleTextAndSaveParams.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Undo - Use 'UndoParams' to pass parameters into this method.
        /// </summary>
        public void Undo()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(296, 6));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(199, 8));

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys1, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys2, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys3, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys4, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys5, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys6, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys7, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoParams.UIRenderHostClientSendKeys8, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Redo - Use 'RedoParams' to pass parameters into this method.
        /// </summary>
        public void Redo()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(104, 4));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(159, 11));

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys1, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys2, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys3, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys4, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys5, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys6, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys7, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RedoParams.UIRenderHostClientSendKeys8, ModifierKeys.Control);
        }
        
        /// <summary>
        /// UndoAfterRedo - Use 'UndoAfterRedoParams' to pass parameters into this method.
        /// </summary>
        public void UndoAfterRedo()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(195, 7));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(175, 13));

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys1, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys2, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys3, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys4, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys5, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys6, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys7, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys8, ModifierKeys.Control);

            // Type 'Control + Z' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.UndoAfterRedoParams.UIRenderHostClientSendKeys9, ModifierKeys.Control);
        }
        
        /// <summary>
        /// TypePreventsRedo - Use 'TypePreventsRedoParams' to pass parameters into this method.
        /// </summary>
        public void TypePreventsRedo()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(303, 5));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(337, 21));

            // Type '{Space}break.' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypePreventsRedoParams.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypePreventsRedoParams.UIRenderHostClientSendKeys1, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypePreventsRedoParams.UIRenderHostClientSendKeys2, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypePreventsRedoParams.UIRenderHostClientSendKeys3, ModifierKeys.Control);

            // Type 'Control + Y' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypePreventsRedoParams.UIRenderHostClientSendKeys4, ModifierKeys.Control);
        }
        
        /// <summary>
        /// TypeSomeText - Use 'TypeSomeTextParams' to pass parameters into this method.
        /// </summary>
        public void TypeSomeText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(242, 1));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(175, 35));

            // Type 'Today{Space}we{Space}have{Space}CVu{Back}{Back}ut{Space}/{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Type '{LShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys1, ModifierKeys.None);

            // Type 'Copy{Space}/{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys2, ModifierKeys.None);

            // Type '{LShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys3, ModifierKeys.None);

            // Type 'Paste{Space}implemented.{Space}It{Space}just{Space}works{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys4, ModifierKeys.None);

            // Type '{RShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys5, ModifierKeys.None);

            // Type '!{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.TypeSomeTextParams.UIRenderHostClientSendKeys6, ModifierKeys.None);
        }
        
        /// <summary>
        /// CopiedText - Use 'CopiedTextParams' to pass parameters into this method.
        /// </summary>
        public void CopiedText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(260, 1));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(283, 10));

            // Move 'RenderHost' client from (378, 9) to (406, 12)
            Mouse.StartDragging(uIRenderHostClient, new Point(378, 9));
            Mouse.StopDragging(uIRenderHostClient, 28, 3);

            // Type 'Control + C' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.CopiedTextParams.UIRenderHostClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// PastedText - Use 'PastedTextParams' to pass parameters into this method.
        /// </summary>
        public void PastedText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(304, 12));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(477, 8));

            // Type 'Control + V' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PastedTextParams.UIRenderHostClientSendKeys, ModifierKeys.Control);

            // Type '{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PastedTextParams.UIRenderHostClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// CutText - Use 'CutTextParams' to pass parameters into this method.
        /// </summary>
        public void CutText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(316, 3));

            // Move 'RenderHost' client from (417, 8) to (453, 10)
            Mouse.StartDragging(uIRenderHostClient, new Point(417, 8));
            Mouse.StopDragging(uIRenderHostClient, 36, 2);

            // Type 'Control + X' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.CutTextParams.UIRenderHostClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// PasteCutText - Use 'PasteCutTextParams' to pass parameters into this method.
        /// </summary>
        public void PasteCutText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(237, 5));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(472, 10));

            // Type '{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Type 'Control + V' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys1, ModifierKeys.Control);

            // Type '.{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys2, ModifierKeys.None);

            // Type '{LShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys3, ModifierKeys.None);

            // Type 'ad{Back}nd{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys4, ModifierKeys.None);

            // Type '{LShiftKey}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys5, ModifierKeys.None);

            // Type 'I{Space}can{Space}p{Back}continue{Space}to{Space}tpe{Back}{Back}ype{Space}.' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.PasteCutTextParams.UIRenderHostClientSendKeys6, ModifierKeys.None);
        }
        
        /// <summary>
        /// RingPaste1 - Use 'RingPaste1Params' to pass parameters into this method.
        /// </summary>
        public void RingPaste1()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(326, 3));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(278, 26));

            // Type 'Control, Shift + {Insert}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RingPaste1Params.UIRenderHostClientSendKeys, (ModifierKeys.Control | ModifierKeys.Shift));
        }
        
        /// <summary>
        /// RingPaste2 - Use 'RingPaste2Params' to pass parameters into this method.
        /// </summary>
        public void RingPaste2()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(284, 8));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(330, 29));

            // Type '{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RingPaste2Params.UIRenderHostClientSendKeys, ModifierKeys.None);

            // Type 'Control, Shift + {Insert}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RingPaste2Params.UIRenderHostClientSendKeys1, (ModifierKeys.Control | ModifierKeys.Shift));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(353, 24));

            // Type '{Space}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RingPaste2Params.UIRenderHostClientSendKeys2, ModifierKeys.None);

            // Type 'Control + V' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.RingPaste2Params.UIRenderHostClientSendKeys3, ModifierKeys.Control);
        }
        
        /// <summary>
        /// EnableLineNumbersAndHUD - Use 'EnableLineNumbersAndHUDParams' to pass parameters into this method.
        /// </summary>
        public void EnableLineNumbersAndHUD()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfCheckBox uILNCheckBox = this.UIMainWindowWindow.UILNCheckBox;
            WpfCheckBox uIHUDCheckBox = this.UIMainWindowWindow.UIHUDCheckBox;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(272, 7));

            // Select 'LN' check box
            uILNCheckBox.Checked = this.EnableLineNumbersAndHUDParams.UILNCheckBoxChecked;

            // Select 'HUD' check box
            uIHUDCheckBox.Checked = this.EnableLineNumbersAndHUDParams.UIHUDCheckBoxChecked;
        }
        
        /// <summary>
        /// LoadSampleText - Use 'LoadSampleTextParams' to pass parameters into this method.
        /// </summary>
        public void LoadSampleText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uILoadButton = this.UIMainWindowWindow.UILoadButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(236, 2));

            // Click 'load' button
            Mouse.Click(uILoadButton, new Point(5, 12));

            // Select 'D:\Projects\TextCore\TextCore\test\data\SampleText.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.LoadSampleTextParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.LoadSampleTextParams.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SomeRandomEditing - Use 'SomeRandomEditingParams' to pass parameters into this method.
        /// </summary>
        public void SomeRandomEditing()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(217, 13));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(232, 123));

            // Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Space}{Space}{Space}lets{Space}do{Space}doe{Back}m{Back}{Space}some{Space}weeet{Space}s{Back}editing{Space}{Enter}{Space}this{Space}is{Space}soo{Space}cool{Space}to{Space}edit{Space}this{Space}way{Space}!{Enter}' in 'RenderHost' client
            Keyboard.SendKeys(uIRenderHostClient, this.SomeRandomEditingParams.UIRenderHostClientSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual OpenSampleTextParams OpenSampleTextParams
        {
            get
            {
                if ((this.mOpenSampleTextParams == null))
                {
                    this.mOpenSampleTextParams = new OpenSampleTextParams();
                }
                return this.mOpenSampleTextParams;
            }
        }
        
        public virtual TypeASentanceParams TypeASentanceParams
        {
            get
            {
                if ((this.mTypeASentanceParams == null))
                {
                    this.mTypeASentanceParams = new TypeASentanceParams();
                }
                return this.mTypeASentanceParams;
            }
        }
        
        public virtual BackspaceAllContentParams BackspaceAllContentParams
        {
            get
            {
                if ((this.mBackspaceAllContentParams == null))
                {
                    this.mBackspaceAllContentParams = new BackspaceAllContentParams();
                }
                return this.mBackspaceAllContentParams;
            }
        }
        
        public virtual TypeAfterLineEndParams TypeAfterLineEndParams
        {
            get
            {
                if ((this.mTypeAfterLineEndParams == null))
                {
                    this.mTypeAfterLineEndParams = new TypeAfterLineEndParams();
                }
                return this.mTypeAfterLineEndParams;
            }
        }
        
        public virtual LaunchTextCoreDemoParams LaunchTextCoreDemoParams
        {
            get
            {
                if ((this.mLaunchTextCoreDemoParams == null))
                {
                    this.mLaunchTextCoreDemoParams = new LaunchTextCoreDemoParams();
                }
                return this.mLaunchTextCoreDemoParams;
            }
        }
        
        public virtual OpenSample2XMLParams OpenSample2XMLParams
        {
            get
            {
                if ((this.mOpenSample2XMLParams == null))
                {
                    this.mOpenSample2XMLParams = new OpenSample2XMLParams();
                }
                return this.mOpenSample2XMLParams;
            }
        }
        
        public virtual AssertVScrollBarExistsExpectedValues AssertVScrollBarExistsExpectedValues
        {
            get
            {
                if ((this.mAssertVScrollBarExistsExpectedValues == null))
                {
                    this.mAssertVScrollBarExistsExpectedValues = new AssertVScrollBarExistsExpectedValues();
                }
                return this.mAssertVScrollBarExistsExpectedValues;
            }
        }
        
        public virtual PageDownParams PageDownParams
        {
            get
            {
                if ((this.mPageDownParams == null))
                {
                    this.mPageDownParams = new PageDownParams();
                }
                return this.mPageDownParams;
            }
        }
        
        public virtual RightToNextLineParams RightToNextLineParams
        {
            get
            {
                if ((this.mRightToNextLineParams == null))
                {
                    this.mRightToNextLineParams = new RightToNextLineParams();
                }
                return this.mRightToNextLineParams;
            }
        }
        
        public virtual LeftToPreviousLineParams LeftToPreviousLineParams
        {
            get
            {
                if ((this.mLeftToPreviousLineParams == null))
                {
                    this.mLeftToPreviousLineParams = new LeftToPreviousLineParams();
                }
                return this.mLeftToPreviousLineParams;
            }
        }
        
        public virtual HitHomeParams HitHomeParams
        {
            get
            {
                if ((this.mHitHomeParams == null))
                {
                    this.mHitHomeParams = new HitHomeParams();
                }
                return this.mHitHomeParams;
            }
        }
        
        public virtual HitEndParams HitEndParams
        {
            get
            {
                if ((this.mHitEndParams == null))
                {
                    this.mHitEndParams = new HitEndParams();
                }
                return this.mHitEndParams;
            }
        }
        
        public virtual PageUpToTopParams PageUpToTopParams
        {
            get
            {
                if ((this.mPageUpToTopParams == null))
                {
                    this.mPageUpToTopParams = new PageUpToTopParams();
                }
                return this.mPageUpToTopParams;
            }
        }
        
        public virtual PageDownToEndParams PageDownToEndParams
        {
            get
            {
                if ((this.mPageDownToEndParams == null))
                {
                    this.mPageDownToEndParams = new PageDownToEndParams();
                }
                return this.mPageDownToEndParams;
            }
        }
        
        public virtual CaretDanceParams CaretDanceParams
        {
            get
            {
                if ((this.mCaretDanceParams == null))
                {
                    this.mCaretDanceParams = new CaretDanceParams();
                }
                return this.mCaretDanceParams;
            }
        }
        
        public virtual EditSampleTextAndSaveParams EditSampleTextAndSaveParams
        {
            get
            {
                if ((this.mEditSampleTextAndSaveParams == null))
                {
                    this.mEditSampleTextAndSaveParams = new EditSampleTextAndSaveParams();
                }
                return this.mEditSampleTextAndSaveParams;
            }
        }
        
        public virtual UndoParams UndoParams
        {
            get
            {
                if ((this.mUndoParams == null))
                {
                    this.mUndoParams = new UndoParams();
                }
                return this.mUndoParams;
            }
        }
        
        public virtual RedoParams RedoParams
        {
            get
            {
                if ((this.mRedoParams == null))
                {
                    this.mRedoParams = new RedoParams();
                }
                return this.mRedoParams;
            }
        }
        
        public virtual UndoAfterRedoParams UndoAfterRedoParams
        {
            get
            {
                if ((this.mUndoAfterRedoParams == null))
                {
                    this.mUndoAfterRedoParams = new UndoAfterRedoParams();
                }
                return this.mUndoAfterRedoParams;
            }
        }
        
        public virtual TypePreventsRedoParams TypePreventsRedoParams
        {
            get
            {
                if ((this.mTypePreventsRedoParams == null))
                {
                    this.mTypePreventsRedoParams = new TypePreventsRedoParams();
                }
                return this.mTypePreventsRedoParams;
            }
        }
        
        public virtual TypeSomeTextParams TypeSomeTextParams
        {
            get
            {
                if ((this.mTypeSomeTextParams == null))
                {
                    this.mTypeSomeTextParams = new TypeSomeTextParams();
                }
                return this.mTypeSomeTextParams;
            }
        }
        
        public virtual CopiedTextParams CopiedTextParams
        {
            get
            {
                if ((this.mCopiedTextParams == null))
                {
                    this.mCopiedTextParams = new CopiedTextParams();
                }
                return this.mCopiedTextParams;
            }
        }
        
        public virtual PastedTextParams PastedTextParams
        {
            get
            {
                if ((this.mPastedTextParams == null))
                {
                    this.mPastedTextParams = new PastedTextParams();
                }
                return this.mPastedTextParams;
            }
        }
        
        public virtual CutTextParams CutTextParams
        {
            get
            {
                if ((this.mCutTextParams == null))
                {
                    this.mCutTextParams = new CutTextParams();
                }
                return this.mCutTextParams;
            }
        }
        
        public virtual PasteCutTextParams PasteCutTextParams
        {
            get
            {
                if ((this.mPasteCutTextParams == null))
                {
                    this.mPasteCutTextParams = new PasteCutTextParams();
                }
                return this.mPasteCutTextParams;
            }
        }
        
        public virtual RingPaste1Params RingPaste1Params
        {
            get
            {
                if ((this.mRingPaste1Params == null))
                {
                    this.mRingPaste1Params = new RingPaste1Params();
                }
                return this.mRingPaste1Params;
            }
        }
        
        public virtual RingPaste2Params RingPaste2Params
        {
            get
            {
                if ((this.mRingPaste2Params == null))
                {
                    this.mRingPaste2Params = new RingPaste2Params();
                }
                return this.mRingPaste2Params;
            }
        }
        
        public virtual EnableLineNumbersAndHUDParams EnableLineNumbersAndHUDParams
        {
            get
            {
                if ((this.mEnableLineNumbersAndHUDParams == null))
                {
                    this.mEnableLineNumbersAndHUDParams = new EnableLineNumbersAndHUDParams();
                }
                return this.mEnableLineNumbersAndHUDParams;
            }
        }
        
        public virtual LoadSampleTextParams LoadSampleTextParams
        {
            get
            {
                if ((this.mLoadSampleTextParams == null))
                {
                    this.mLoadSampleTextParams = new LoadSampleTextParams();
                }
                return this.mLoadSampleTextParams;
            }
        }
        
        public virtual SomeRandomEditingParams SomeRandomEditingParams
        {
            get
            {
                if ((this.mSomeRandomEditingParams == null))
                {
                    this.mSomeRandomEditingParams = new SomeRandomEditingParams();
                }
                return this.mSomeRandomEditingParams;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenSampleTextParams mOpenSampleTextParams;
        
        private TypeASentanceParams mTypeASentanceParams;
        
        private BackspaceAllContentParams mBackspaceAllContentParams;
        
        private TypeAfterLineEndParams mTypeAfterLineEndParams;
        
        private LaunchTextCoreDemoParams mLaunchTextCoreDemoParams;
        
        private OpenSample2XMLParams mOpenSample2XMLParams;
        
        private AssertVScrollBarExistsExpectedValues mAssertVScrollBarExistsExpectedValues;
        
        private PageDownParams mPageDownParams;
        
        private RightToNextLineParams mRightToNextLineParams;
        
        private LeftToPreviousLineParams mLeftToPreviousLineParams;
        
        private HitHomeParams mHitHomeParams;
        
        private HitEndParams mHitEndParams;
        
        private PageUpToTopParams mPageUpToTopParams;
        
        private PageDownToEndParams mPageDownToEndParams;
        
        private CaretDanceParams mCaretDanceParams;
        
        private EditSampleTextAndSaveParams mEditSampleTextAndSaveParams;
        
        private UndoParams mUndoParams;
        
        private RedoParams mRedoParams;
        
        private UndoAfterRedoParams mUndoAfterRedoParams;
        
        private TypePreventsRedoParams mTypePreventsRedoParams;
        
        private TypeSomeTextParams mTypeSomeTextParams;
        
        private CopiedTextParams mCopiedTextParams;
        
        private PastedTextParams mPastedTextParams;
        
        private CutTextParams mCutTextParams;
        
        private PasteCutTextParams mPasteCutTextParams;
        
        private RingPaste1Params mRingPaste1Params;
        
        private RingPaste2Params mRingPaste2Params;
        
        private EnableLineNumbersAndHUDParams mEnableLineNumbersAndHUDParams;
        
        private LoadSampleTextParams mLoadSampleTextParams;
        
        private SomeRandomEditingParams mSomeRandomEditingParams;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        
        private UISaveAsWindow mUISaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSampleText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class OpenSampleTextParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\TextCore\\bin\\Debug\\TextCore.exe";
        
        /// <summary>
        /// Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\TextCore\\bin\\Debug\\TextCore.exe";
        
        /// <summary>
        /// Select 'D:\Projects\TextCore\TextCore\Test\Data\SampleText.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\Test\\Data\\SampleText.txt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeASentance'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class TypeASentanceParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\TextCore\\bin\\Debug\\TextCore.exe";
        
        /// <summary>
        /// Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\TextCore\\bin\\Debug\\TextCore.exe";
        
        /// <summary>
        /// Type 'Save{Space}the{Space}world{Back}{Back}ld.,{Back}{Back}{Space}!{Space}Make{Space}it{Space}a{Space}better{Space}place{Space}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Delete}{Delete}r{Space}{Right}{Right}{Right}{Right}{Right}{Space}for{Space}you{Space}and{Space}for{Space}me{Space}and{Space}the{Space}entire{Space}human{Space}race{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClient1SendKeys = @"Save{Space}the{Space}world{Back}{Back}ld.,{Back}{Back}{Space}!{Space}Make{Space}it{Space}a{Space}better{Space}place{Space}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Delete}{Delete}r{Space}{Right}{Right}{Right}{Right}{Right}{Space}for{Space}you{Space}and{Space}for{Space}me{Space}and{Space}the{Space}entire{Space}human{Space}race{Space}";
        
        /// <summary>
        /// Type '{RShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClient1SendKeys1 = "{RShiftKey}";
        
        /// <summary>
        /// Type '!{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Back}n{Left}{Left}{Left}{Left}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Delete}!' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClient1SendKeys2 = "!{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Back}n{Left}{Left}{Left}{Left}{Right}" +
            "{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Delete}!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BackspaceAllContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class BackspaceAllContentParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}And{Space}Back{Space}!' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClient1SendKeys = @"{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}And{Space}Back{Space}!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeAfterLineEnd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class TypeAfterLineEndParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Back}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Back}";
        
        /// <summary>
        /// Type '{Space}and{Space}I{Space}am{Space}able{Space}to{Space}type{Space}after{Space}the{Space}end{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "{Space}and{Space}I{Space}am{Space}able{Space}to{Space}type{Space}after{Space}the{" +
            "Space}end{Space}";
        
        /// <summary>
        /// Type '{RShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "{RShiftKey}";
        
        /// <summary>
        /// Type '!' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "!";
        
        /// <summary>
        /// Type '{Space}Cool{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "{Space}Cool{Space}";
        
        /// <summary>
        /// Type '{RShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys5 = "{RShiftKey}";
        
        /// <summary>
        /// Type '!' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys6 = "!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LaunchTextCoreDemo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LaunchTextCoreDemoParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
        /// </summary>
        public string ExePath = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\TextCore\\bin\\Debug\\TextCore.exe";
        
        /// <summary>
        /// Launch 'D:\Projects\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
        /// </summary>
        public string AlternateExePath = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\TextCore\\bin\\Debug\\TextCore.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSample2XML'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class OpenSample2XMLParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'D:\Projects\TextCore\TextCore\test\data\Sample2.xml' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\Test\\Data\\Sample2.xml";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertVScrollBarExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertVScrollBarExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'vScrollBar' scroll bar's property 'Enabled' equals 'True'
        /// </summary>
        public bool UIVScrollBarScrollBarEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PageDown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class PageDownParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{PageDown}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{PageDown}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RightToNextLine'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RightToNextLineParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Rig" +
            "ht}{Right}{Right}{Right}{Right}{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LeftToPreviousLine'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LeftToPreviousLineParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Le" +
            "ft}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HitHome'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class HitHomeParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HitEnd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class HitEndParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{End}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{End}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PageUpToTop'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class PageUpToTopParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClient1SendKeys = @"{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}{PageUp}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PageDownToEnd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class PageDownToEndParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = @"{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}";
        
        /// <summary>
        /// Type '{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = @"{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}{PageDown}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CaretDance'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class CaretDanceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Down}{Right}{Right}{Right}{Down}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Right}{Right}{Right}{Right}{Down}{Right}{Right}{Right}{Down}{Left}{Left}{Left}{L" +
            "eft}{Left}{Left}{Left}{Left}{Left}{Left}{Up}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditSampleTextAndSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class EditSampleTextAndSaveParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Space}is{Space}the{Space}best{Space}!{Space}and' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Space}is{Space}the{Space}best{Space}!{Space}and";
        
        /// <summary>
        /// Select 'Current\SampleTextSave.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Current\\SampleTextSave.txt";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Undo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UndoParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys5 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys6 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys7 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys8 = "Z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Redo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RedoParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys5 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys6 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys7 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys8 = "Y";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UndoAfterRedo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UndoAfterRedoParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys5 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys6 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys7 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys8 = "Z";
        
        /// <summary>
        /// Type 'Control + Z' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys9 = "Z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypePreventsRedo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class TypePreventsRedoParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Space}break.' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Space}break.";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "Y";
        
        /// <summary>
        /// Type 'Control + Y' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "Y";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeSomeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class TypeSomeTextParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Today{Space}we{Space}have{Space}CVu{Back}{Back}ut{Space}/{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "Today{Space}we{Space}have{Space}CVu{Back}{Back}ut{Space}/{Space}";
        
        /// <summary>
        /// Type '{LShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "{LShiftKey}";
        
        /// <summary>
        /// Type 'Copy{Space}/{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "Copy{Space}/{Space}";
        
        /// <summary>
        /// Type '{LShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "{LShiftKey}";
        
        /// <summary>
        /// Type 'Paste{Space}implemented.{Space}It{Space}just{Space}works{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "Paste{Space}implemented.{Space}It{Space}just{Space}works{Space}";
        
        /// <summary>
        /// Type '{RShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys5 = "{RShiftKey}";
        
        /// <summary>
        /// Type '!{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys6 = "!{Space}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopiedText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class CopiedTextParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + C' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "C";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PastedText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class PastedTextParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + V' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "V";
        
        /// <summary>
        /// Type '{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "{Space}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CutText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class CutTextParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + X' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "X";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasteCutText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class PasteCutTextParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Space}";
        
        /// <summary>
        /// Type 'Control + V' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "V";
        
        /// <summary>
        /// Type '.{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = ".{Space}";
        
        /// <summary>
        /// Type '{LShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "{LShiftKey}";
        
        /// <summary>
        /// Type 'ad{Back}nd{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys4 = "ad{Back}nd{Space}";
        
        /// <summary>
        /// Type '{LShiftKey}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys5 = "{LShiftKey}";
        
        /// <summary>
        /// Type 'I{Space}can{Space}p{Back}continue{Space}to{Space}tpe{Back}{Back}ype{Space}.' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys6 = "I{Space}can{Space}p{Back}continue{Space}to{Space}tpe{Back}{Back}ype{Space}.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RingPaste1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RingPaste1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control, Shift + {Insert}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Insert}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RingPaste2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RingPaste2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = "{Space}";
        
        /// <summary>
        /// Type 'Control, Shift + {Insert}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys1 = "{Insert}";
        
        /// <summary>
        /// Type '{Space}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys2 = "{Space}";
        
        /// <summary>
        /// Type 'Control + V' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys3 = "V";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnableLineNumbersAndHUD'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class EnableLineNumbersAndHUDParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'LN' check box
        /// </summary>
        public bool UILNCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'HUD' check box
        /// </summary>
        public bool UIHUDCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadSampleText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LoadSampleTextParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'D:\Projects\TextCore\TextCore\test\data\SampleText.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "D:\\Projects\\sushanth.assembla.com\\trunk\\TextCore\\TextCore\\Test\\Data\\SampleText.txt";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SomeRandomEditing'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class SomeRandomEditingParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Space}{Space}{Space}lets{Space}do{Space}doe{Back}m{Back}{Space}some{Space}weeet{Space}s{Back}editing{Space}{Enter}{Space}this{Space}is{Space}soo{Space}cool{Space}to{Space}edit{Space}this{Space}way{Space}!{Enter}' in 'RenderHost' client
        /// </summary>
        public string UIRenderHostClientSendKeys = @"{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Space}{Space}{Space}lets{Space}do{Space}doe{Back}m{Back}{Space}some{Space}weeet{Space}s{Back}editing{Space}{Enter}{Space}this{Space}is{Space}soo{Space}cool{Space}to{Space}edit{Space}this{Space}way{Space}!{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIMainWindowTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new UIMainWindowTitleBar(this);
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        
        public WpfButton UILoadButton
        {
            get
            {
                if ((this.mUILoadButton == null))
                {
                    this.mUILoadButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoadButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUILoadButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILoadButton;
            }
        }
        
        public UITextEditorCustom UITextEditorCustom
        {
            get
            {
                if ((this.mUITextEditorCustom == null))
                {
                    this.mUITextEditorCustom = new UITextEditorCustom(this);
                }
                return this.mUITextEditorCustom;
            }
        }
        
        public WpfButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button3";
                    this.mUISaveButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        
        public WpfCheckBox UILNCheckBox
        {
            get
            {
                if ((this.mUILNCheckBox == null))
                {
                    this.mUILNCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUILNCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "showLineNumnber";
                    this.mUILNCheckBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILNCheckBox;
            }
        }
        
        public WpfCheckBox UIHUDCheckBox
        {
            get
            {
                if ((this.mUIHUDCheckBox == null))
                {
                    this.mUIHUDCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIHUDCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "showHUD";
                    this.mUIHUDCheckBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIHUDCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private UIMainWindowTitleBar mUIMainWindowTitleBar;
        
        private WpfButton mUILoadButton;
        
        private UITextEditorCustom mUITextEditorCustom;
        
        private WpfButton mUISaveButton;
        
        private WpfCheckBox mUILNCheckBox;
        
        private WpfCheckBox mUIHUDCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainWindowTitleBar : WpfTitleBar
    {
        
        public UIMainWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITextEditorCustom : WpfCustom
    {
        
        public UITextEditorCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.TextControlUserControl";
            this.SearchProperties["AutomationId"] = "TextEditor";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIVScrollBarScrollBar UIVScrollBarScrollBar
        {
            get
            {
                if ((this.mUIVScrollBarScrollBar == null))
                {
                    this.mUIVScrollBarScrollBar = new UIVScrollBarScrollBar(this);
                }
                return this.mUIVScrollBarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIVScrollBarScrollBar mUIVScrollBarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIVScrollBarScrollBar : WpfScrollBar
    {
        
        public UIVScrollBarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "vScrollBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPageDownButton
        {
            get
            {
                if ((this.mUIPageDownButton == null))
                {
                    this.mUIPageDownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPageDownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PageDown";
                    this.mUIPageDownButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPageDownButton;
            }
        }
        
        public WpfButton UILineUpButton
        {
            get
            {
                if ((this.mUILineUpButton == null))
                {
                    this.mUILineUpButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILineUpButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "LineUp";
                    this.mUILineUpButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILineUpButton;
            }
        }
        
        public WpfButton UILineDownButton
        {
            get
            {
                if ((this.mUILineDownButton == null))
                {
                    this.mUILineDownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILineDownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "LineDown";
                    this.mUILineDownButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILineDownButton;
            }
        }
        
        public WpfControl UIItemIndicator
        {
            get
            {
                if ((this.mUIItemIndicator == null))
                {
                    this.mUIItemIndicator = new WpfControl(this);
                    #region Search Criteria
                    this.mUIItemIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIItemIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemIndicator;
            }
        }
        
        public WpfButton UIPageUpButton
        {
            get
            {
                if ((this.mUIPageUpButton == null))
                {
                    this.mUIPageUpButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPageUpButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PageUp";
                    this.mUIPageUpButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPageUpButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPageDownButton;
        
        private WpfButton mUILineUpButton;
        
        private WpfButton mUILineDownButton;
        
        private WpfControl mUIItemIndicator;
        
        private WpfButton mUIPageUpButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinControl UIOpenDialog
        {
            get
            {
                if ((this.mUIOpenDialog == null))
                {
                    this.mUIOpenDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIOpenDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Open";
                    this.mUIOpenDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIOpenDialog.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenDialog;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private WinControl mUIOpenDialog;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIRenderHostPane UIRenderHostPane
        {
            get
            {
                if ((this.mUIRenderHostPane == null))
                {
                    this.mUIRenderHostPane = new UIRenderHostPane(this);
                }
                return this.mUIRenderHostPane;
            }
        }
        #endregion
        
        #region Fields
        private UIRenderHostPane mUIRenderHostPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRenderHostPane : WpfPane
    {
        
        public UIRenderHostPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.RenderHost";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "RenderHost";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinClient UIRenderHostClient
        {
            get
            {
                if ((this.mUIRenderHostClient == null))
                {
                    this.mUIRenderHostClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIRenderHostClient.SearchProperties[WinControl.PropertyNames.Name] = "RenderHost";
                    this.mUIRenderHostClient.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIRenderHostClient;
            }
        }
        
        public WinClient UIRenderHostClient1
        {
            get
            {
                if ((this.mUIRenderHostClient1 == null))
                {
                    this.mUIRenderHostClient1 = new WinClient(this);
                    #region Search Criteria
                    this.mUIRenderHostClient1.SearchProperties[WinControl.PropertyNames.Name] = "RenderHost";
                    this.mUIRenderHostClient1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIRenderHostClient1;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIRenderHostClient;
        
        private WinClient mUIRenderHostClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
}
