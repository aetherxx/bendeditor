// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        private void CaptureVerify(string testName)
        {
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            Image currentJpegImage = uIRenderHostClient.CaptureImage();
            if (Settings.GenerateBaseLine)
            {
                currentJpegImage.Save(Settings.TestDataDirectory + "Baseline\\"+ testName + ".jpg");
            }
            else
            {
                currentJpegImage.Save(Settings.TestDataDirectory + "Current\\"+ testName + ".jpg");
                Bitmap currentImage = new Bitmap(currentJpegImage);
                Bitmap originalImage = new Bitmap(Image.FromFile(Settings.TestDataDirectory + "Baseline\\"+ testName + ".jpg"));

                bool areImagesEqual = true;
                if (currentImage.Width == originalImage.Width && currentImage.Height == originalImage.Height)
                {
                    for (int h = 0; h < currentImage.Height; h++)
                    {
                        for (int w = 0; w < currentImage.Width; w++)
                        {
                            if (originalImage.GetPixel(w, h) != currentImage.GetPixel(w, h))
                            {
                                areImagesEqual = false;
                                break;
                            }
                        }
                    }
                }
                else
                {
                    areImagesEqual = false;
                }

                System.Diagnostics.Debug.Assert(areImagesEqual , "Image comparision failure in test case " + testName);
            }
        }

        /// <summary>
        /// OpenSampleText - Use 'OpenSampleTextParams' to pass parameters into this method.
        /// </summary>
        public void OpenSampleText()
        {
            #region Variable Declarations
            WpfTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uILoadButton = this.UIMainWindowWindow.UILoadButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinControl uIOpenDialog = this.UIOpenWindow.UIOpenDialog;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Launch 'D:\assembla\trunk\TextCore\TextCore\TextCore\bin\Debug\TextCore.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.OpenSampleTextParams.UIMainWindowWindowExePath, this.OpenSampleTextParams.UIMainWindowWindowAlternateExePath);

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(199, 5));

            // Click 'load' button
            Mouse.Click(uILoadButton, new Point(11, 9));

            // Select 'D:\assembla\trunk\TextCore\TextCore\Test\SampleText.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenSampleTextParams.UIFilenameComboBoxEditableItem;

            // Click 'Open' Dialog
            Mouse.Click(uIOpenDialog, new Point(232, 465));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(55, 9));

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(3, 7));

            this.CaptureVerify("OpenSampleText");
        }

        /// <summary>
        /// ClickAtChar2
        /// </summary>
        public void ClickAtChar2()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(7, 8));

            this.CaptureVerify("ClickAtChar2");
        }

        /// <summary>
        /// SelectPickups
        /// </summary>
        public void SelectPickups()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Move 'RenderHost' client from (74, 7) to (132, 8)
            Mouse.StartDragging(uIRenderHostClient, new Point(74, 7));
            Mouse.StopDragging(uIRenderHostClient, 58, 1);

            this.CaptureVerify("SelectPickups");
        }

        /// <summary>
        /// ClickAtLine5
        /// </summary>
        public void ClickAtLine5()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Click 'RenderHost' client
            Mouse.Click(uIRenderHostClient, new Point(58, 75));

            this.CaptureVerify("ClickAtLine5");
        }

        /// <summary>
        /// SelectBunchOfLines
        /// </summary>
        public void SelectBunchOfLines()
        {
            #region Variable Declarations
            WinClient uIRenderHostClient = this.UIMainWindowWindow1.UIRenderHostPane.UIRenderHostClient;
            #endregion

            // Move 'RenderHost' client from (74, 70) to (245, 222)
            Mouse.StartDragging(uIRenderHostClient, new Point(74, 70));
            Mouse.StopDragging(uIRenderHostClient, 171, 152);

            this.CaptureVerify("SelectBunchOfLines");
        }

        /// <summary>
        /// Close - Use 'CloseParams' to pass parameters into this method.
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIMainWindowWindow.UIMainWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 7));
        }
        
        #region Properties
        public virtual OpenSampleTextParams OpenSampleTextParams
        {
            get
            {
                if ((this.mOpenSampleTextParams == null))
                {
                    this.mOpenSampleTextParams = new OpenSampleTextParams();
                }
                return this.mOpenSampleTextParams;
            }
        }

        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private OpenSampleTextParams mOpenSampleTextParams;

        private UIMainWindowWindow mUIMainWindowWindow;

        private UIOpenWindow mUIOpenWindow;

        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSampleText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class OpenSampleTextParams
    {
        
        #region Fields

        public string UIMainWindowWindowExePath = Settings.TestAppFullPath;

        public string UIMainWindowWindowAlternateExePath = Settings.TestAppFullPath;

        /// <summary>
        /// Select 'D:\assembla\trunk\TextCore\TextCore\Test\SampleText.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = Settings.TestDataDirectory + "SampleText.txt";
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIMainWindowTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new UIMainWindowTitleBar(this);
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        
        public WpfButton UILoadButton
        {
            get
            {
                if ((this.mUILoadButton == null))
                {
                    this.mUILoadButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoadButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUILoadButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILoadButton;
            }
        }
        #endregion
        
        #region Fields
        private UIMainWindowTitleBar mUIMainWindowTitleBar;
        
        private WpfButton mUILoadButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainWindowTitleBar : WpfTitleBar
    {
        
        public UIMainWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinControl UIOpenDialog
        {
            get
            {
                if ((this.mUIOpenDialog == null))
                {
                    this.mUIOpenDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIOpenDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Open";
                    this.mUIOpenDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIOpenDialog.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenDialog;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private WinControl mUIOpenDialog;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIRenderHostPane UIRenderHostPane
        {
            get
            {
                if ((this.mUIRenderHostPane == null))
                {
                    this.mUIRenderHostPane = new UIRenderHostPane(this);
                }
                return this.mUIRenderHostPane;
            }
        }
        #endregion
        
        #region Fields
        private UIRenderHostPane mUIRenderHostPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRenderHostPane : WpfPane
    {
        
        public UIRenderHostPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.RenderHost";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "RenderHost";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinClient UIRenderHostClient
        {
            get
            {
                if ((this.mUIRenderHostClient == null))
                {
                    this.mUIRenderHostClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIRenderHostClient.SearchProperties[WinControl.PropertyNames.Name] = "RenderHost";
                    this.mUIRenderHostClient.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIRenderHostClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIRenderHostClient;
        #endregion
    }
}
